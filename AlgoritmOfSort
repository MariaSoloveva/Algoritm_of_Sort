#include <algorithm>
#include <iostream>
#include <cmath>
#include <random>
#include <string>
#include <vector>

template<class T>
std::vector<T> generate_random_vector(std::size_t num, T min = -20, T max = 20)
{
    std::random_device rd;
    std::mt19937 e2(rd());
    std::uniform_real_distribution<T> dist(min, max);

    auto lambda = [&e2, &dist] () { return dist(e2); };

    std::vector<T> result(num);
    std::generate_n(result.begin(), num, lambda);
    return result;
}

int main() {
    std::vector<int> v = generate_random_vector<int>(10, -20, 20);
    int min = 0;
    int temp = 0;
    for (int i = 0; i < v.size(); ++i) {
        for (int j = i + 1; j < v.size(); ++i) {
            if (v[i] < v[min]) {
                min = i;
            }
        }
        temp = v[min];
        v[min] = v[i];
        v[i] = temp;
    }
    for (int i = 0; i < v.size(); ++i) {
        std::cout << v[i] << " ";
    }
    min = 0;
    std::vector<int> v2 = generate_random_vector<int>(10, -20, 20);
    for (int i = 0; i < v2.size(); ++i) {
        for (int j = i + 1; j < v2.size(); ++i) {
            if (v2[i] < v2[min]) {
                min = i;
            }
        }
        temp = v2[min];
        v2[min] = v2[i];
        v2[i] = temp;
    }
    for (int i = 0; i < 10; ++i) {
        std::cout << v[i] << " ";
    }
    std::vector<int> vAll = generate_random_vector<int>(20, -20, 20);
    for (int i = 0; i < vAll.size(); ++i) {
        vAll.push_back(v[i]);
    for (int i = 0; i < vAll.size(); ++i) {
        vAll.push_back(v2[i]);
    }
    int x = 0;
    int y = 0;
    int z = 0;
    do {
        if (v[x] >= v2[y])
        {
            std::cout << v2[y] << " ";
            vAll[z] = v2[y];
            y +=1;
            z += 1;
        }
        if (v[x] < v2[y])
        {
            std::cout << v[x] << " ";
            vAll[z] = v[x];
            x +=1;
            z += 1;
        }
        if (y == /// )
        {
            for (int i = x; i < v1.size(); ++i)
            {
                std::cout << v[i] << " ";
                vAll[z] = v[i];
                z += 1;
            }
        }
        if (x == ...)
        {
            for (int i = y; i < v2.size(); ++i)
            {
                std::cout << v2[i] << " ";
                vAll[z] = v2[i];
                z += 1;
            }
        }
    } while ((x < v.size()) && (y < v2.size()));
    std::cout << std::endl;
    for (int i = 0; i < ; ++i)
    {
        std::cout << vAll[i] << " ";
}
}
