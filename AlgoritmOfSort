#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <iostream>
#include <random>
#include <vector>
template<class T>
std::vector<T> generate_random_vector(std::size_t num, T min = -10, T max = 10)
{
    std::random_device rd;
    std::mt19937 e2(rd());
    std::uniform_real_distribution<> dist(min, max);
    auto lambda = [&e2, &dist] () -> T { return dist(e2); };
    std::vector<T> result(num);
    std::generate_n(result.begin(), num, lambda);
    return result;
}

int main()
{
//Задаем вектор и выводим его
    std::cout << "Enter size of the first vector" << std::endl;
    size_t len = 0;
    std::cin >> len;

    std::vector<int> vectorOne = generate_random_vector<int>(len, -10, 10);
    for (int i = 0; i < vectorOne.size(); ++i)
    {
        std::cout << vectorOne[i] << " ";
    }
    std::cout << std::endl;
//Сортировка пузырком
    int  remember = 0;
    for (int i = 0; i < vectorOne.size() - 1; ++i)
    {
        for (int j = i + 1; j < vectorOne.size(); ++j)
        {
            if (vectorOne[i] > vectorOne[j])
            {
                remember = vectorOne[i];
                vectorOne[i] = vectorOne[j];
                vectorOne[j] = remember;
            }
        }
    }
    //Вывод
    for (int i = 0; i < vectorOne.size(); ++i)
    {
        std::cout << vectorOne[i] << " ";
    }
    //Создаем второй динамический массив и выводим его
    std::cout << "Enter size of the second vector" << std::endl;
    std::cin >> len;
    std::vector<int> vectorTwo = generate_random_vector<int>(len, -10, 10);
    for (int i = 0; i < vectorTwo.size(); ++i)
    {
        std::cout << vectorTwo[i] << " ";
    }
    std::cout << std::endl;
//Отсортировываем его методом "пузырька"
    remember = 0;
    for (int i = 0; i < vectorTwo.size() - 1; ++i)
    {
        for (int j = i + 1; j < vectorTwo.size(); ++j)
        {
            if (vectorTwo[i] > vectorTwo[j])
            {
                remember = vectorTwo[i];
                vectorTwo[i] = vectorTwo[j];
                vectorTwo[j] = remember;
            }
        }
    }
    for (int i = 0; i < vectorTwo.size(); ++i)
    {
        std::cout << vectorTwo[i] << " ";
    }
    std::cout << std::endl;
    int lengthOfTwo = len1 + len2;
    std::vector<int> LastArray(lengthOfTwo);
    lengthOfTwo = 0;
    int i = 0;
    int j = 0;
    while ((i < len1) && (j < len2))
    {
        if (VectorOne[i] > VectorTwo[j]) {
            LastArray[lengthOfTwo] = VectorTwo[j];
            ++j;
            ++LastArray;
        } else if (VectorOne[i] <= VectorTwo[j]) {
            LastArray[lengthOfTwo] = VectorOne[i];
            ++i;
            ++LastArray;
        }
        if (i == len1) {
            for (int k = j; k < len2; ++k) {
                LastArray[lengthOfTwo] = VectorOne[k];
                ++LastArray;
            }
        }
        if (j == length2) {
            for (int k = i; k < len1; ++k) {
                LastArray[lengthOfTwo] = VectorTwo[k];
                ++LastArray;
            }
        }
    }
    for (int k = 0; k < len1 + len2; ++k)
    {
        std::cout << LastArray[k] << " ";
    }
    return 0;
}
